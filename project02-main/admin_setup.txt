ADMIN ACCOUNT SETUP GUIDE
==========================

This guide explains how to create admin accounts for the E-Class Record System.

READY-MADE ADMIN ACCOUNT
========================

Use this pre-configured admin account for testing:

Username: admin001
Password: Admin123!
Role: admin

Direct Login URL:
http://127.0.0.1:5000/admin-login?role=admin&username=admin001&password=Admin123!

HOW TO CREATE ADMIN ACCOUNTS MANUALLY
=====================================

Method 1: Using Python Script
-----------------------------

Create a file called `create_admin.py` in your project directory:

```python
from app import app, db
from models import User
from werkzeug.security import generate_password_hash

def create_admin():
    with app.app_context():
        # Check if admin already exists
        existing_admin = User.query.filter_by(school_id='admin001').first()
        if existing_admin:
            print("Admin account already exists!")
            return

        # Create new admin
        admin = User(school_id='admin001', role='admin')
        admin.set_password('Admin123!')

        db.session.add(admin)
        db.session.commit()

        print("Admin account created successfully!")
        print("Username: admin001")
        print("Password: Admin123!")

if __name__ == "__main__":
    create_admin()
```

Run the script:
python create_admin.py

Method 2: Using Flask Shell
---------------------------

1. Start your Flask application
2. Open a new terminal and run:
   python -c "from app import app, db; from models import User; admin = User(school_id='admin001', role='admin'); admin.set_password('Admin123!'); app.app_context().push(); db.session.add(admin); db.session.commit(); print('Admin created!')"

Method 3: Direct Database Insertion
------------------------------------

If you have direct database access, run this SQL:

```sql
INSERT INTO users (school_id, password_hash, role, created_at)
VALUES ('admin001', 'pbkdf2:sha256:600000$yourhash$yourhash', 'admin', NOW());
```

Note: Replace the password_hash with the actual hash generated by Werkzeug.

ADMIN ACCOUNT REQUIREMENTS
=========================

- School ID: Must be unique (e.g., admin001, admin002)
- Password: Must meet security requirements:
  * Minimum 6 characters
  * At least one uppercase letter
  * At least one lowercase letter
  * At least one number
- Role: Must be set to 'admin'

ADMIN PERMISSIONS
=================

Admins can:
- Create instructor accounts
- View all users
- Manage system settings
- Access audit logs
- Generate reports

TESTING THE ADMIN ACCOUNT
=========================

1. Start the Flask application:
   python app.py

2. Visit the admin login page:
   http://127.0.0.1:5000/admin-login

3. Use the direct login URL or enter credentials manually:
   Username: admin001
   Password: Admin123!

4. You should be redirected to the admin dashboard

TROUBLESHOOTING
===============

If login fails:
1. Check that the database is running
2. Verify the admin account exists in the database
3. Check the application logs for error messages
4. Ensure the password hash is correct

If you need multiple admin accounts, repeat the creation process with different usernames.